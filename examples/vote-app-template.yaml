# First create a Config Map from seed_data.json file
# kubectl create configmap seeds --from-file=seed_data.json
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: flask
  annotations:
spec:
  rules:
  - host: flask.cloud.noverit.com
    http:
      paths:
      - path: /
        backend:
          serviceName: flask
          servicePort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: flask
  labels:
    run: flask
spec:
  # We assume there is an Ingress Controller in place
  # Create an Ingress to expose this service
  type: ClusterIP
  selector:
    run: flask
  ports:
  - name: http
    protocol: TCP
    port: 5000
    targetPort: 5000

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  generation: 1
  labels:
    run: flask
  name: flask
spec:
  replicas: 1
  selector:
    matchLabels:
      run: flask
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: flask
    spec:
      containers:
      - image: kalise/flask-vote-app:latest
        imagePullPolicy: Always
        name: flask
        ports:
        - containerPort: 5000
          protocol: TCP
        resources: {}
        volumeMounts:
          - name: seeds
            mountPath: /app/seeds
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /index.html
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5      
      dnsPolicy: ClusterFirst
      volumes:
      - name: seeds
        configMap:
          name: seeds
